This is a programming puzzle. Your task is to fill out the following script in the places indicated by a comment such that it always prints a "success", subject to the constraints below:

import random

def rand_rotation(bool_list):
    # Determine the number of positions to rotate
    rotation = random.randint(0, 3)
    
    # Perform the rotation
    return bool_list[-rotation:] + bool_list[:-rotation]

def puzzle(bools):
    # your step 1 code
    if all(bools) or not any(bools): return "success"
    bools = rand_rotation(bools)

    # your step 2 code
    if all(bools) or not any(bools): return "success"
    bools = rand_rotation(bools)
    
    # your step 3 code
    if all(bools) or not any(bools): return "success"
    bools = rand_rotation(bools)

    # your step 4 code
    if all(bools) or not any(bools): return "success"
    bools = rand_rotation(bools)

    # your step 5 code
    if all(bools) or not any(bools): return "success"
    bools = rand_rotation(bools)

    # your step 6 code
    if all(bools) or not any(bools): return "success"
    bools = rand_rotation(bools)

    return "failure"

def generate_random_bools():
    return [random.choice([True, False]) for _ in range(4)]

def run_puzzle_tests(num_tests=1000):
    for i in range(num_tests):
        bool_list = generate_random_bools()
        if puzzle(bool_list) == "failure":
            return "failure"
    return "success"

if __name__ == "__main__":
    print(run_puzzle_tests())


CONSTRAINTS:
============
1.) on each iteration, you may inspect no more than 2 elements.
2.) If you wish, you may alter the value of each element you inspect to either True or False.
3.) You may store whatever intermediate variables you want to provided they don't go against the above constraints.

Your solution must be deterministically correct. A solution that relies on good fortune will receive 0 points. 
